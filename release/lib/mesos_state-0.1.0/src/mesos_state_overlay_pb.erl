%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.27.3
-module(mesos_state_overlay_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_AgentOverlayInfo.State.Status'/1, 'enum_value_by_symbol_AgentOverlayInfo.State.Status'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("mesos_state_overlay_pb.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'AgentOverlayInfo.State.Status'() :: 'STATUS_INVALID' | 'STATUS_OK' | 'STATUS_FAILED' | 'STATUS_CONFIGURING'.
-export_type(['AgentOverlayInfo.State.Status'/0]).

%% message types
-type mesos_state_overlayinfo() :: #mesos_state_overlayinfo{}.
-type mesos_state_networkconfig() :: #mesos_state_networkconfig{}.
-type 'mesos_state_agentoverlayinfo.state'() :: #'mesos_state_agentoverlayinfo.state'{}.
-type mesos_state_vxlaninfo() :: #mesos_state_vxlaninfo{}.
-type mesos_state_backendinfo() :: #mesos_state_backendinfo{}.
-type mesos_state_bridgeinfo() :: #mesos_state_bridgeinfo{}.
-type mesos_state_agentoverlayinfo() :: #mesos_state_agentoverlayinfo{}.
-type mesos_state_agentinfo() :: #mesos_state_agentinfo{}.
-type mesos_state_state() :: #mesos_state_state{}.
-export_type(['mesos_state_overlayinfo'/0, 'mesos_state_networkconfig'/0, 'mesos_state_agentoverlayinfo.state'/0, 'mesos_state_vxlaninfo'/0, 'mesos_state_backendinfo'/0, 'mesos_state_bridgeinfo'/0, 'mesos_state_agentoverlayinfo'/0, 'mesos_state_agentinfo'/0, 'mesos_state_state'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    verify_msg(Msg, Opts),
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #mesos_state_overlayinfo{} ->
	  e_msg_mesos_state_overlayinfo(Msg, TrUserData);
      #mesos_state_networkconfig{} ->
	  e_msg_mesos_state_networkconfig(Msg, TrUserData);
      #'mesos_state_agentoverlayinfo.state'{} ->
	  'e_msg_mesos_state_agentoverlayinfo.state'(Msg,
						     TrUserData);
      #mesos_state_vxlaninfo{} ->
	  e_msg_mesos_state_vxlaninfo(Msg, TrUserData);
      #mesos_state_backendinfo{} ->
	  e_msg_mesos_state_backendinfo(Msg, TrUserData);
      #mesos_state_bridgeinfo{} ->
	  e_msg_mesos_state_bridgeinfo(Msg, TrUserData);
      #mesos_state_agentoverlayinfo{} ->
	  e_msg_mesos_state_agentoverlayinfo(Msg, TrUserData);
      #mesos_state_agentinfo{} ->
	  e_msg_mesos_state_agentinfo(Msg, TrUserData);
      #mesos_state_state{} ->
	  e_msg_mesos_state_state(Msg, TrUserData)
    end.



e_msg_mesos_state_overlayinfo(Msg, TrUserData) ->
    e_msg_mesos_state_overlayinfo(Msg, <<>>, TrUserData).


e_msg_mesos_state_overlayinfo(#mesos_state_overlayinfo{name
							   = F1,
						       subnet = F2,
						       prefix = F3},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_varint(TrF3, <<B2/binary, 24>>)
    end.

e_msg_mesos_state_networkconfig(Msg, TrUserData) ->
    e_msg_mesos_state_networkconfig(Msg, <<>>, TrUserData).


e_msg_mesos_state_networkconfig(#mesos_state_networkconfig{vtep_subnet
							       = F1,
							   vtep_mac_oui = F2,
							   overlays = F3},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_mesos_state_networkconfig_overlays(TrF3, B2,
							TrUserData)
      end
    end.

'e_msg_mesos_state_agentoverlayinfo.state'(Msg,
					   TrUserData) ->
    'e_msg_mesos_state_agentoverlayinfo.state'(Msg, <<>>,
					       TrUserData).


'e_msg_mesos_state_agentoverlayinfo.state'(#'mesos_state_agentoverlayinfo.state'{status
										     =
										     F1,
										 error
										     =
										     F2},
					   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  'e_enum_AgentOverlayInfo.State.Status'(TrF1,
							 <<Bin/binary, 8>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_mesos_state_vxlaninfo(Msg, TrUserData) ->
    e_msg_mesos_state_vxlaninfo(Msg, <<>>, TrUserData).


e_msg_mesos_state_vxlaninfo(#mesos_state_vxlaninfo{vni =
						       F1,
						   vtep_name = F2, vtep_ip = F3,
						   vtep_mac = F4},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_string(TrF4, <<B3/binary, 34>>)
    end.

e_msg_mesos_state_backendinfo(Msg, TrUserData) ->
    e_msg_mesos_state_backendinfo(Msg, <<>>, TrUserData).


e_msg_mesos_state_backendinfo(#mesos_state_backendinfo{vxlan
							   = F1},
			      Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_mfield_mesos_state_backendinfo_vxlan(TrF1,
						    <<Bin/binary, 10>>,
						    TrUserData)
	   end
    end.

e_msg_mesos_state_bridgeinfo(Msg, TrUserData) ->
    e_msg_mesos_state_bridgeinfo(Msg, <<>>, TrUserData).


e_msg_mesos_state_bridgeinfo(#mesos_state_bridgeinfo{name
							 = F1,
						     ip = F2},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_mesos_state_agentoverlayinfo(Msg, TrUserData) ->
    e_msg_mesos_state_agentoverlayinfo(Msg, <<>>,
				       TrUserData).


e_msg_mesos_state_agentoverlayinfo(#mesos_state_agentoverlayinfo{info
								     = F1,
								 subnet = F2,
								 mesos_bridge =
								     F3,
								 docker_bridge =
								     F4,
								 backend = F5,
								 state = F6},
				   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_mesos_state_agentoverlayinfo_info(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_mesos_state_agentoverlayinfo_mesos_bridge(TrF3,
								     <<B2/binary,
								       26>>,
								     TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_mesos_state_agentoverlayinfo_docker_bridge(TrF4,
								      <<B3/binary,
									34>>,
								      TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_mfield_mesos_state_agentoverlayinfo_backend(TrF5,
								<<B4/binary,
								  42>>,
								TrUserData)
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     e_mfield_mesos_state_agentoverlayinfo_state(TrF6,
							 <<B5/binary, 50>>,
							 TrUserData)
	   end
    end.

e_msg_mesos_state_agentinfo(Msg, TrUserData) ->
    e_msg_mesos_state_agentinfo(Msg, <<>>, TrUserData).


e_msg_mesos_state_agentinfo(#mesos_state_agentinfo{ip =
						       F1,
						   overlays = F2},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_mesos_state_agentinfo_overlays(TrF2, B1,
						    TrUserData)
      end
    end.

e_msg_mesos_state_state(Msg, TrUserData) ->
    e_msg_mesos_state_state(Msg, <<>>, TrUserData).


e_msg_mesos_state_state(#mesos_state_state{network = F1,
					   agents = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_mesos_state_state_network(TrF1,
						     <<Bin/binary, 10>>,
						     TrUserData)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_mesos_state_state_agents(TrF2, B1, TrUserData)
      end
    end.

e_mfield_mesos_state_networkconfig_overlays(Msg, Bin,
					    TrUserData) ->
    SubBin = e_msg_mesos_state_overlayinfo(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mesos_state_networkconfig_overlays([Elem
					    | Rest],
					   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	e_mfield_mesos_state_networkconfig_overlays(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_mesos_state_networkconfig_overlays(Rest, Bin3,
					       TrUserData);
e_field_mesos_state_networkconfig_overlays([], Bin,
					   _TrUserData) ->
    Bin.

e_mfield_mesos_state_backendinfo_vxlan(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_mesos_state_vxlaninfo(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_info(Msg, Bin,
					   TrUserData) ->
    SubBin = e_msg_mesos_state_overlayinfo(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_mesos_bridge(Msg,
						   Bin, TrUserData) ->
    SubBin = e_msg_mesos_state_bridgeinfo(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_docker_bridge(Msg,
						    Bin, TrUserData) ->
    SubBin = e_msg_mesos_state_bridgeinfo(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_backend(Msg, Bin,
					      TrUserData) ->
    SubBin = e_msg_mesos_state_backendinfo(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_state(Msg, Bin,
					    TrUserData) ->
    SubBin = 'e_msg_mesos_state_agentoverlayinfo.state'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentinfo_overlays(Msg, Bin,
					TrUserData) ->
    SubBin = e_msg_mesos_state_agentoverlayinfo(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mesos_state_agentinfo_overlays([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_mesos_state_agentinfo_overlays(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    e_field_mesos_state_agentinfo_overlays(Rest, Bin3,
					   TrUserData);
e_field_mesos_state_agentinfo_overlays([], Bin,
				       _TrUserData) ->
    Bin.

e_mfield_mesos_state_state_network(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_mesos_state_networkconfig(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_state_agents(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_mesos_state_agentinfo(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mesos_state_state_agents([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_mesos_state_state_agents(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_mesos_state_state_agents(Rest, Bin3,
				     TrUserData);
e_field_mesos_state_state_agents([], Bin,
				 _TrUserData) ->
    Bin.



'e_enum_AgentOverlayInfo.State.Status'('STATUS_INVALID',
				       Bin) ->
    <<Bin/binary, 0>>;
'e_enum_AgentOverlayInfo.State.Status'('STATUS_OK',
				       Bin) ->
    <<Bin/binary, 1>>;
'e_enum_AgentOverlayInfo.State.Status'('STATUS_FAILED',
				       Bin) ->
    <<Bin/binary, 2>>;
'e_enum_AgentOverlayInfo.State.Status'('STATUS_CONFIGURING',
				       Bin) ->
    <<Bin/binary, 3>>;
'e_enum_AgentOverlayInfo.State.Status'(V, Bin) ->
    e_varint(V, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      mesos_state_overlayinfo ->
	  d_msg_mesos_state_overlayinfo(Bin, TrUserData);
      mesos_state_networkconfig ->
	  d_msg_mesos_state_networkconfig(Bin, TrUserData);
      'mesos_state_agentoverlayinfo.state' ->
	  'd_msg_mesos_state_agentoverlayinfo.state'(Bin,
						     TrUserData);
      mesos_state_vxlaninfo ->
	  d_msg_mesos_state_vxlaninfo(Bin, TrUserData);
      mesos_state_backendinfo ->
	  d_msg_mesos_state_backendinfo(Bin, TrUserData);
      mesos_state_bridgeinfo ->
	  d_msg_mesos_state_bridgeinfo(Bin, TrUserData);
      mesos_state_agentoverlayinfo ->
	  d_msg_mesos_state_agentoverlayinfo(Bin, TrUserData);
      mesos_state_agentinfo ->
	  d_msg_mesos_state_agentinfo(Bin, TrUserData);
      mesos_state_state ->
	  d_msg_mesos_state_state(Bin, TrUserData)
    end.



d_msg_mesos_state_overlayinfo(Bin, TrUserData) ->
    dfp_read_field_def_mesos_state_overlayinfo(Bin, 0, 0,
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_mesos_state_overlayinfo(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_mesos_state_overlayinfo_name(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData);
dfp_read_field_def_mesos_state_overlayinfo(<<18,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_mesos_state_overlayinfo_subnet(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData);
dfp_read_field_def_mesos_state_overlayinfo(<<24,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_mesos_state_overlayinfo_prefix(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData);
dfp_read_field_def_mesos_state_overlayinfo(<<>>, 0, 0,
					   F1, F2, F3, _) ->
    #mesos_state_overlayinfo{name = F1, subnet = F2,
			     prefix = F3};
dfp_read_field_def_mesos_state_overlayinfo(Other, Z1,
					   Z2, F1, F2, F3, TrUserData) ->
    dg_read_field_def_mesos_state_overlayinfo(Other, Z1, Z2,
					      F1, F2, F3, TrUserData).

dg_read_field_def_mesos_state_overlayinfo(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_overlayinfo(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3,
					      TrUserData);
dg_read_field_def_mesos_state_overlayinfo(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_overlayinfo_name(Rest, 0, 0, F1, F2,
					       F3, TrUserData);
      18 ->
	  d_field_mesos_state_overlayinfo_subnet(Rest, 0, 0, F1,
						 F2, F3, TrUserData);
      24 ->
	  d_field_mesos_state_overlayinfo_prefix(Rest, 0, 0, F1,
						 F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_overlayinfo(Rest, 0, 0, F1, F2,
						    F3, TrUserData);
	    1 ->
		skip_64_mesos_state_overlayinfo(Rest, 0, 0, F1, F2, F3,
						TrUserData);
	    2 ->
		skip_length_delimited_mesos_state_overlayinfo(Rest, 0,
							      0, F1, F2, F3,
							      TrUserData);
	    3 ->
		skip_group_mesos_state_overlayinfo(Rest, Key bsr 3, 0,
						   F1, F2, F3, TrUserData);
	    5 ->
		skip_32_mesos_state_overlayinfo(Rest, 0, 0, F1, F2, F3,
						TrUserData)
	  end
    end;
dg_read_field_def_mesos_state_overlayinfo(<<>>, 0, 0,
					  F1, F2, F3, _) ->
    #mesos_state_overlayinfo{name = F1, subnet = F2,
			     prefix = F3}.

d_field_mesos_state_overlayinfo_name(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_mesos_state_overlayinfo_name(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_mesos_state_overlayinfo_name(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_overlayinfo(Rest2, 0, 0,
					       NewFValue, F2, F3, TrUserData).


d_field_mesos_state_overlayinfo_subnet(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_mesos_state_overlayinfo_subnet(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
d_field_mesos_state_overlayinfo_subnet(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_overlayinfo(Rest2, 0, 0,
					       F1, NewFValue, F3, TrUserData).


d_field_mesos_state_overlayinfo_prefix(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_mesos_state_overlayinfo_prefix(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
d_field_mesos_state_overlayinfo_prefix(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_mesos_state_overlayinfo(Rest, 0, 0,
					       F1, F2, NewFValue, TrUserData).


skip_varint_mesos_state_overlayinfo(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_mesos_state_overlayinfo(Rest, Z1, Z2, F1,
					F2, F3, TrUserData);
skip_varint_mesos_state_overlayinfo(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_mesos_state_overlayinfo(Rest, Z1, Z2,
					       F1, F2, F3, TrUserData).


skip_length_delimited_mesos_state_overlayinfo(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_mesos_state_overlayinfo(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, TrUserData);
skip_length_delimited_mesos_state_overlayinfo(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_overlayinfo(Rest2, 0, 0,
					       F1, F2, F3, TrUserData).


skip_group_mesos_state_overlayinfo(Bin, FNum, Z2, F1,
				   F2, F3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_mesos_state_overlayinfo(Rest, 0, Z2,
					       F1, F2, F3, TrUserData).


skip_32_mesos_state_overlayinfo(<<_:32, Rest/binary>>,
				Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_mesos_state_overlayinfo(Rest, Z1, Z2,
					       F1, F2, F3, TrUserData).


skip_64_mesos_state_overlayinfo(<<_:64, Rest/binary>>,
				Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_mesos_state_overlayinfo(Rest, Z1, Z2,
					       F1, F2, F3, TrUserData).


d_msg_mesos_state_networkconfig(Bin, TrUserData) ->
    dfp_read_field_def_mesos_state_networkconfig(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id([], TrUserData),
						 TrUserData).

dfp_read_field_def_mesos_state_networkconfig(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_mesos_state_networkconfig_vtep_subnet(Rest, Z1,
						  Z2, F1, F2, F3, TrUserData);
dfp_read_field_def_mesos_state_networkconfig(<<18,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_mesos_state_networkconfig_vtep_mac_oui(Rest, Z1,
						   Z2, F1, F2, F3, TrUserData);
dfp_read_field_def_mesos_state_networkconfig(<<26,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_mesos_state_networkconfig_overlays(Rest, Z1, Z2,
					       F1, F2, F3, TrUserData);
dfp_read_field_def_mesos_state_networkconfig(<<>>, 0, 0,
					     F1, F2, F3, TrUserData) ->
    #mesos_state_networkconfig{vtep_subnet = F1,
			       vtep_mac_oui = F2,
			       overlays = lists_reverse(F3, TrUserData)};
dfp_read_field_def_mesos_state_networkconfig(Other, Z1,
					     Z2, F1, F2, F3, TrUserData) ->
    dg_read_field_def_mesos_state_networkconfig(Other, Z1,
						Z2, F1, F2, F3, TrUserData).

dg_read_field_def_mesos_state_networkconfig(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_networkconfig(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3,
						TrUserData);
dg_read_field_def_mesos_state_networkconfig(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_networkconfig_vtep_subnet(Rest, 0,
							0, F1, F2, F3,
							TrUserData);
      18 ->
	  d_field_mesos_state_networkconfig_vtep_mac_oui(Rest, 0,
							 0, F1, F2, F3,
							 TrUserData);
      26 ->
	  d_field_mesos_state_networkconfig_overlays(Rest, 0, 0,
						     F1, F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_networkconfig(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    1 ->
		skip_64_mesos_state_networkconfig(Rest, 0, 0, F1, F2,
						  F3, TrUserData);
	    2 ->
		skip_length_delimited_mesos_state_networkconfig(Rest, 0,
								0, F1, F2, F3,
								TrUserData);
	    3 ->
		skip_group_mesos_state_networkconfig(Rest, Key bsr 3, 0,
						     F1, F2, F3, TrUserData);
	    5 ->
		skip_32_mesos_state_networkconfig(Rest, 0, 0, F1, F2,
						  F3, TrUserData)
	  end
    end;
dg_read_field_def_mesos_state_networkconfig(<<>>, 0, 0,
					    F1, F2, F3, TrUserData) ->
    #mesos_state_networkconfig{vtep_subnet = F1,
			       vtep_mac_oui = F2,
			       overlays = lists_reverse(F3, TrUserData)}.

d_field_mesos_state_networkconfig_vtep_subnet(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_mesos_state_networkconfig_vtep_subnet(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, TrUserData);
d_field_mesos_state_networkconfig_vtep_subnet(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_networkconfig(Rest2, 0,
						 0, NewFValue, F2, F3,
						 TrUserData).


d_field_mesos_state_networkconfig_vtep_mac_oui(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_mesos_state_networkconfig_vtep_mac_oui(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, TrUserData);
d_field_mesos_state_networkconfig_vtep_mac_oui(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_networkconfig(Rest2, 0,
						 0, F1, NewFValue, F3,
						 TrUserData).


d_field_mesos_state_networkconfig_overlays(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_mesos_state_networkconfig_overlays(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3,
					       TrUserData);
d_field_mesos_state_networkconfig_overlays(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mesos_state_overlayinfo(Bs,
						 TrUserData),
		   TrUserData),
    dfp_read_field_def_mesos_state_networkconfig(Rest2, 0,
						 0, F1, F2,
						 cons(NewFValue, F3,
						      TrUserData),
						 TrUserData).


skip_varint_mesos_state_networkconfig(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_mesos_state_networkconfig(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData);
skip_varint_mesos_state_networkconfig(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_mesos_state_networkconfig(Rest, Z1,
						 Z2, F1, F2, F3, TrUserData).


skip_length_delimited_mesos_state_networkconfig(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_mesos_state_networkconfig(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, TrUserData);
skip_length_delimited_mesos_state_networkconfig(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_networkconfig(Rest2, 0,
						 0, F1, F2, F3, TrUserData).


skip_group_mesos_state_networkconfig(Bin, FNum, Z2, F1,
				     F2, F3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_mesos_state_networkconfig(Rest, 0,
						 Z2, F1, F2, F3, TrUserData).


skip_32_mesos_state_networkconfig(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_mesos_state_networkconfig(Rest, Z1,
						 Z2, F1, F2, F3, TrUserData).


skip_64_mesos_state_networkconfig(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_mesos_state_networkconfig(Rest, Z1,
						 Z2, F1, F2, F3, TrUserData).


'd_msg_mesos_state_agentoverlayinfo.state'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Bin,
							    0, 0,
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    TrUserData).

'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(<<8,
							  Rest/binary>>,
							Z1, Z2, F1, F2,
							TrUserData) ->
    'd_field_mesos_state_agentoverlayinfo.state_status'(Rest,
							Z1, Z2, F1, F2,
							TrUserData);
'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(<<18,
							  Rest/binary>>,
							Z1, Z2, F1, F2,
							TrUserData) ->
    'd_field_mesos_state_agentoverlayinfo.state_error'(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData);
'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(<<>>,
							0, 0, F1, F2, _) ->
    #'mesos_state_agentoverlayinfo.state'{status = F1,
					  error = F2};
'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Other,
							Z1, Z2, F1, F2,
							TrUserData) ->
    'dg_read_field_def_mesos_state_agentoverlayinfo.state'(Other,
							   Z1, Z2, F1, F2,
							   TrUserData).

'dg_read_field_def_mesos_state_agentoverlayinfo.state'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2,
						       TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, TrUserData);
'dg_read_field_def_mesos_state_agentoverlayinfo.state'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2,
						       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos_state_agentoverlayinfo.state_status'(Rest,
							      0, 0, F1, F2,
							      TrUserData);
      18 ->
	  'd_field_mesos_state_agentoverlayinfo.state_error'(Rest,
							     0, 0, F1, F2,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos_state_agentoverlayinfo.state'(Rest,
								 0, 0, F1, F2,
								 TrUserData);
	    1 ->
		'skip_64_mesos_state_agentoverlayinfo.state'(Rest, 0, 0,
							     F1, F2,
							     TrUserData);
	    2 ->
		'skip_length_delimited_mesos_state_agentoverlayinfo.state'(Rest,
									   0, 0,
									   F1,
									   F2,
									   TrUserData);
	    3 ->
		'skip_group_mesos_state_agentoverlayinfo.state'(Rest,
								Key bsr 3, 0,
								F1, F2,
								TrUserData);
	    5 ->
		'skip_32_mesos_state_agentoverlayinfo.state'(Rest, 0, 0,
							     F1, F2, TrUserData)
	  end
    end;
'dg_read_field_def_mesos_state_agentoverlayinfo.state'(<<>>,
						       0, 0, F1, F2, _) ->
    #'mesos_state_agentoverlayinfo.state'{status = F1,
					  error = F2}.

'd_field_mesos_state_agentoverlayinfo.state_status'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_mesos_state_agentoverlayinfo.state_status'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, TrUserData);
'd_field_mesos_state_agentoverlayinfo.state_status'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, _, F2,
						    TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_AgentOverlayInfo.State.Status'(Tmp),
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							    0, 0, NewFValue, F2,
							    TrUserData).


'd_field_mesos_state_agentoverlayinfo.state_error'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_mesos_state_agentoverlayinfo.state_error'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, TrUserData);
'd_field_mesos_state_agentoverlayinfo.state_error'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest2,
							    0, 0, F1, NewFValue,
							    TrUserData).


'skip_varint_mesos_state_agentoverlayinfo.state'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_mesos_state_agentoverlayinfo.state'(Rest,
						     Z1, Z2, F1, F2,
						     TrUserData);
'skip_varint_mesos_state_agentoverlayinfo.state'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							    Z1, Z2, F1, F2,
							    TrUserData).


'skip_length_delimited_mesos_state_agentoverlayinfo.state'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2,
							   TrUserData)
    when N < 57 ->
    'skip_length_delimited_mesos_state_agentoverlayinfo.state'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F1, F2,
							       TrUserData);
'skip_length_delimited_mesos_state_agentoverlayinfo.state'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2,
							   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest2,
							    0, 0, F1, F2,
							    TrUserData).


'skip_group_mesos_state_agentoverlayinfo.state'(Bin,
						FNum, Z2, F1, F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							    0, Z2, F1, F2,
							    TrUserData).


'skip_32_mesos_state_agentoverlayinfo.state'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							    Z1, Z2, F1, F2,
							    TrUserData).


'skip_64_mesos_state_agentoverlayinfo.state'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							    Z1, Z2, F1, F2,
							    TrUserData).


d_msg_mesos_state_vxlaninfo(Bin, TrUserData) ->
    dfp_read_field_def_mesos_state_vxlaninfo(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_mesos_state_vxlaninfo(<<8,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_mesos_state_vxlaninfo_vni(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData);
dfp_read_field_def_mesos_state_vxlaninfo(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_mesos_state_vxlaninfo_vtep_name(Rest, Z1, Z2,
					    F1, F2, F3, F4, TrUserData);
dfp_read_field_def_mesos_state_vxlaninfo(<<26,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_mesos_state_vxlaninfo_vtep_ip(Rest, Z1, Z2, F1,
					  F2, F3, F4, TrUserData);
dfp_read_field_def_mesos_state_vxlaninfo(<<34,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_mesos_state_vxlaninfo_vtep_mac(Rest, Z1, Z2, F1,
					   F2, F3, F4, TrUserData);
dfp_read_field_def_mesos_state_vxlaninfo(<<>>, 0, 0, F1,
					 F2, F3, F4, _) ->
    #mesos_state_vxlaninfo{vni = F1, vtep_name = F2,
			   vtep_ip = F3, vtep_mac = F4};
dfp_read_field_def_mesos_state_vxlaninfo(Other, Z1, Z2,
					 F1, F2, F3, F4, TrUserData) ->
    dg_read_field_def_mesos_state_vxlaninfo(Other, Z1, Z2,
					    F1, F2, F3, F4, TrUserData).

dg_read_field_def_mesos_state_vxlaninfo(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_vxlaninfo(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4,
					    TrUserData);
dg_read_field_def_mesos_state_vxlaninfo(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_mesos_state_vxlaninfo_vni(Rest, 0, 0, F1, F2,
					    F3, F4, TrUserData);
      18 ->
	  d_field_mesos_state_vxlaninfo_vtep_name(Rest, 0, 0, F1,
						  F2, F3, F4, TrUserData);
      26 ->
	  d_field_mesos_state_vxlaninfo_vtep_ip(Rest, 0, 0, F1,
						F2, F3, F4, TrUserData);
      34 ->
	  d_field_mesos_state_vxlaninfo_vtep_mac(Rest, 0, 0, F1,
						 F2, F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_vxlaninfo(Rest, 0, 0, F1, F2,
						  F3, F4, TrUserData);
	    1 ->
		skip_64_mesos_state_vxlaninfo(Rest, 0, 0, F1, F2, F3,
					      F4, TrUserData);
	    2 ->
		skip_length_delimited_mesos_state_vxlaninfo(Rest, 0, 0,
							    F1, F2, F3, F4,
							    TrUserData);
	    3 ->
		skip_group_mesos_state_vxlaninfo(Rest, Key bsr 3, 0, F1,
						 F2, F3, F4, TrUserData);
	    5 ->
		skip_32_mesos_state_vxlaninfo(Rest, 0, 0, F1, F2, F3,
					      F4, TrUserData)
	  end
    end;
dg_read_field_def_mesos_state_vxlaninfo(<<>>, 0, 0, F1,
					F2, F3, F4, _) ->
    #mesos_state_vxlaninfo{vni = F1, vtep_name = F2,
			   vtep_ip = F3, vtep_mac = F4}.

d_field_mesos_state_vxlaninfo_vni(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_mesos_state_vxlaninfo_vni(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4,
				      TrUserData);
d_field_mesos_state_vxlaninfo_vni(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_mesos_state_vxlaninfo(Rest, 0, 0,
					     NewFValue, F2, F3, F4, TrUserData).


d_field_mesos_state_vxlaninfo_vtep_name(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_mesos_state_vxlaninfo_vtep_name(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4,
					    TrUserData);
d_field_mesos_state_vxlaninfo_vtep_name(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_vxlaninfo(Rest2, 0, 0,
					     F1, NewFValue, F3, F4, TrUserData).


d_field_mesos_state_vxlaninfo_vtep_ip(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_mesos_state_vxlaninfo_vtep_ip(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4,
					  TrUserData);
d_field_mesos_state_vxlaninfo_vtep_ip(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, _, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_vxlaninfo(Rest2, 0, 0,
					     F1, F2, NewFValue, F4, TrUserData).


d_field_mesos_state_vxlaninfo_vtep_mac(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_mesos_state_vxlaninfo_vtep_mac(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
d_field_mesos_state_vxlaninfo_vtep_mac(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_vxlaninfo(Rest2, 0, 0,
					     F1, F2, F3, NewFValue, TrUserData).


skip_varint_mesos_state_vxlaninfo(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_mesos_state_vxlaninfo(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData);
skip_varint_mesos_state_vxlaninfo(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_mesos_state_vxlaninfo(Rest, Z1, Z2,
					     F1, F2, F3, F4, TrUserData).


skip_length_delimited_mesos_state_vxlaninfo(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_mesos_state_vxlaninfo(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						TrUserData);
skip_length_delimited_mesos_state_vxlaninfo(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4,
					    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_vxlaninfo(Rest2, 0, 0,
					     F1, F2, F3, F4, TrUserData).


skip_group_mesos_state_vxlaninfo(Bin, FNum, Z2, F1, F2,
				 F3, F4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_mesos_state_vxlaninfo(Rest, 0, Z2,
					     F1, F2, F3, F4, TrUserData).


skip_32_mesos_state_vxlaninfo(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_mesos_state_vxlaninfo(Rest, Z1, Z2,
					     F1, F2, F3, F4, TrUserData).


skip_64_mesos_state_vxlaninfo(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_mesos_state_vxlaninfo(Rest, Z1, Z2,
					     F1, F2, F3, F4, TrUserData).


d_msg_mesos_state_backendinfo(Bin, TrUserData) ->
    dfp_read_field_def_mesos_state_backendinfo(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_mesos_state_backendinfo(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1, TrUserData) ->
    d_field_mesos_state_backendinfo_vxlan(Rest, Z1, Z2, F1,
					  TrUserData);
dfp_read_field_def_mesos_state_backendinfo(<<>>, 0, 0,
					   F1, _) ->
    #mesos_state_backendinfo{vxlan = F1};
dfp_read_field_def_mesos_state_backendinfo(Other, Z1,
					   Z2, F1, TrUserData) ->
    dg_read_field_def_mesos_state_backendinfo(Other, Z1, Z2,
					      F1, TrUserData).

dg_read_field_def_mesos_state_backendinfo(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_backendinfo(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
dg_read_field_def_mesos_state_backendinfo(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_backendinfo_vxlan(Rest, 0, 0, F1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_backendinfo(Rest, 0, 0, F1,
						    TrUserData);
	    1 ->
		skip_64_mesos_state_backendinfo(Rest, 0, 0, F1,
						TrUserData);
	    2 ->
		skip_length_delimited_mesos_state_backendinfo(Rest, 0,
							      0, F1,
							      TrUserData);
	    3 ->
		skip_group_mesos_state_backendinfo(Rest, Key bsr 3, 0,
						   F1, TrUserData);
	    5 ->
		skip_32_mesos_state_backendinfo(Rest, 0, 0, F1,
						TrUserData)
	  end
    end;
dg_read_field_def_mesos_state_backendinfo(<<>>, 0, 0,
					  F1, _) ->
    #mesos_state_backendinfo{vxlan = F1}.

d_field_mesos_state_backendinfo_vxlan(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_mesos_state_backendinfo_vxlan(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
d_field_mesos_state_backendinfo_vxlan(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mesos_state_vxlaninfo(Bs,
					       TrUserData),
		   TrUserData),
    dfp_read_field_def_mesos_state_backendinfo(Rest2, 0, 0,
					       if F1 == undefined -> NewFValue;
						  true ->
						      merge_msg_mesos_state_vxlaninfo(F1,
										      NewFValue,
										      TrUserData)
					       end,
					       TrUserData).


skip_varint_mesos_state_backendinfo(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    skip_varint_mesos_state_backendinfo(Rest, Z1, Z2, F1,
					TrUserData);
skip_varint_mesos_state_backendinfo(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_mesos_state_backendinfo(Rest, Z1, Z2,
					       F1, TrUserData).


skip_length_delimited_mesos_state_backendinfo(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_mesos_state_backendinfo(Rest,
						  N + 7, X bsl N + Acc, F1,
						  TrUserData);
skip_length_delimited_mesos_state_backendinfo(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_backendinfo(Rest2, 0, 0,
					       F1, TrUserData).


skip_group_mesos_state_backendinfo(Bin, FNum, Z2, F1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_mesos_state_backendinfo(Rest, 0, Z2,
					       F1, TrUserData).


skip_32_mesos_state_backendinfo(<<_:32, Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_mesos_state_backendinfo(Rest, Z1, Z2,
					       F1, TrUserData).


skip_64_mesos_state_backendinfo(<<_:64, Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_mesos_state_backendinfo(Rest, Z1, Z2,
					       F1, TrUserData).


d_msg_mesos_state_bridgeinfo(Bin, TrUserData) ->
    dfp_read_field_def_mesos_state_bridgeinfo(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_mesos_state_bridgeinfo(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, TrUserData) ->
    d_field_mesos_state_bridgeinfo_name(Rest, Z1, Z2, F1,
					F2, TrUserData);
dfp_read_field_def_mesos_state_bridgeinfo(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, TrUserData) ->
    d_field_mesos_state_bridgeinfo_ip(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_mesos_state_bridgeinfo(<<>>, 0, 0,
					  F1, F2, _) ->
    #mesos_state_bridgeinfo{name = F1, ip = F2};
dfp_read_field_def_mesos_state_bridgeinfo(Other, Z1, Z2,
					  F1, F2, TrUserData) ->
    dg_read_field_def_mesos_state_bridgeinfo(Other, Z1, Z2,
					     F1, F2, TrUserData).

dg_read_field_def_mesos_state_bridgeinfo(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_bridgeinfo(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_mesos_state_bridgeinfo(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_bridgeinfo_name(Rest, 0, 0, F1, F2,
					      TrUserData);
      18 ->
	  d_field_mesos_state_bridgeinfo_ip(Rest, 0, 0, F1, F2,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_bridgeinfo(Rest, 0, 0, F1, F2,
						   TrUserData);
	    1 ->
		skip_64_mesos_state_bridgeinfo(Rest, 0, 0, F1, F2,
					       TrUserData);
	    2 ->
		skip_length_delimited_mesos_state_bridgeinfo(Rest, 0, 0,
							     F1, F2,
							     TrUserData);
	    3 ->
		skip_group_mesos_state_bridgeinfo(Rest, Key bsr 3, 0,
						  F1, F2, TrUserData);
	    5 ->
		skip_32_mesos_state_bridgeinfo(Rest, 0, 0, F1, F2,
					       TrUserData)
	  end
    end;
dg_read_field_def_mesos_state_bridgeinfo(<<>>, 0, 0, F1,
					 F2, _) ->
    #mesos_state_bridgeinfo{name = F1, ip = F2}.

d_field_mesos_state_bridgeinfo_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_mesos_state_bridgeinfo_name(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
d_field_mesos_state_bridgeinfo_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_bridgeinfo(Rest2, 0, 0,
					      NewFValue, F2, TrUserData).


d_field_mesos_state_bridgeinfo_ip(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_mesos_state_bridgeinfo_ip(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_mesos_state_bridgeinfo_ip(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_bridgeinfo(Rest2, 0, 0,
					      F1, NewFValue, TrUserData).


skip_varint_mesos_state_bridgeinfo(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_mesos_state_bridgeinfo(Rest, Z1, Z2, F1, F2,
				       TrUserData);
skip_varint_mesos_state_bridgeinfo(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_mesos_state_bridgeinfo(Rest, Z1, Z2,
					      F1, F2, TrUserData).


skip_length_delimited_mesos_state_bridgeinfo(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_mesos_state_bridgeinfo(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 TrUserData);
skip_length_delimited_mesos_state_bridgeinfo(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_bridgeinfo(Rest2, 0, 0,
					      F1, F2, TrUserData).


skip_group_mesos_state_bridgeinfo(Bin, FNum, Z2, F1, F2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_mesos_state_bridgeinfo(Rest, 0, Z2,
					      F1, F2, TrUserData).


skip_32_mesos_state_bridgeinfo(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_mesos_state_bridgeinfo(Rest, Z1, Z2,
					      F1, F2, TrUserData).


skip_64_mesos_state_bridgeinfo(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_mesos_state_bridgeinfo(Rest, Z1, Z2,
					      F1, F2, TrUserData).


d_msg_mesos_state_agentoverlayinfo(Bin, TrUserData) ->
    dfp_read_field_def_mesos_state_agentoverlayinfo(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_mesos_state_agentoverlayinfo(<<10,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5, F6,
						TrUserData) ->
    d_field_mesos_state_agentoverlayinfo_info(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6,
					      TrUserData);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<18,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5, F6,
						TrUserData) ->
    d_field_mesos_state_agentoverlayinfo_subnet(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6,
						TrUserData);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<26,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5, F6,
						TrUserData) ->
    d_field_mesos_state_agentoverlayinfo_mesos_bridge(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, TrUserData);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<34,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5, F6,
						TrUserData) ->
    d_field_mesos_state_agentoverlayinfo_docker_bridge(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, TrUserData);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<42,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5, F6,
						TrUserData) ->
    d_field_mesos_state_agentoverlayinfo_backend(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6,
						 TrUserData);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<50,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5, F6,
						TrUserData) ->
    d_field_mesos_state_agentoverlayinfo_state(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6,
					       TrUserData);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<>>, 0,
						0, F1, F2, F3, F4, F5, F6, _) ->
    #mesos_state_agentoverlayinfo{info = F1, subnet = F2,
				  mesos_bridge = F3, docker_bridge = F4,
				  backend = F5, state = F6};
dfp_read_field_def_mesos_state_agentoverlayinfo(Other,
						Z1, Z2, F1, F2, F3, F4, F5, F6,
						TrUserData) ->
    dg_read_field_def_mesos_state_agentoverlayinfo(Other,
						   Z1, Z2, F1, F2, F3, F4, F5,
						   F6, TrUserData).

dg_read_field_def_mesos_state_agentoverlayinfo(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_agentoverlayinfo(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, TrUserData);
dg_read_field_def_mesos_state_agentoverlayinfo(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_agentoverlayinfo_info(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6,
						    TrUserData);
      18 ->
	  d_field_mesos_state_agentoverlayinfo_subnet(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      TrUserData);
      26 ->
	  d_field_mesos_state_agentoverlayinfo_mesos_bridge(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6,
							    TrUserData);
      34 ->
	  d_field_mesos_state_agentoverlayinfo_docker_bridge(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6,
							     TrUserData);
      42 ->
	  d_field_mesos_state_agentoverlayinfo_backend(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       TrUserData);
      50 ->
	  d_field_mesos_state_agentoverlayinfo_state(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6,
						     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_agentoverlayinfo(Rest, 0, 0, F1,
							 F2, F3, F4, F5, F6,
							 TrUserData);
	    1 ->
		skip_64_mesos_state_agentoverlayinfo(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6,
						     TrUserData);
	    2 ->
		skip_length_delimited_mesos_state_agentoverlayinfo(Rest,
								   0, 0, F1, F2,
								   F3, F4, F5,
								   F6,
								   TrUserData);
	    3 ->
		skip_group_mesos_state_agentoverlayinfo(Rest, Key bsr 3,
							0, F1, F2, F3, F4, F5,
							F6, TrUserData);
	    5 ->
		skip_32_mesos_state_agentoverlayinfo(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, TrUserData)
	  end
    end;
dg_read_field_def_mesos_state_agentoverlayinfo(<<>>, 0,
					       0, F1, F2, F3, F4, F5, F6, _) ->
    #mesos_state_agentoverlayinfo{info = F1, subnet = F2,
				  mesos_bridge = F3, docker_bridge = F4,
				  backend = F5, state = F6}.

d_field_mesos_state_agentoverlayinfo_info(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6,
					  TrUserData)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_info(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, TrUserData);
d_field_mesos_state_agentoverlayinfo_info(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6,
					  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mesos_state_overlayinfo(Bs,
						 TrUserData),
		   TrUserData),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0,
						    if F1 == undefined ->
							   NewFValue;
						       true ->
							   merge_msg_mesos_state_overlayinfo(F1,
											     NewFValue,
											     TrUserData)
						    end,
						    F2, F3, F4, F5, F6,
						    TrUserData).


d_field_mesos_state_agentoverlayinfo_subnet(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6,
					    TrUserData)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_subnet(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, TrUserData);
d_field_mesos_state_agentoverlayinfo_subnet(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, _, F3, F4, F5, F6,
					    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, NewFValue, F3, F4,
						    F5, F6, TrUserData).


d_field_mesos_state_agentoverlayinfo_mesos_bridge(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, TrUserData)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_mesos_bridge(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6,
						      TrUserData);
d_field_mesos_state_agentoverlayinfo_mesos_bridge(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mesos_state_bridgeinfo(Bs,
						TrUserData),
		   TrUserData),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2,
						    if F3 == undefined ->
							   NewFValue;
						       true ->
							   merge_msg_mesos_state_bridgeinfo(F3,
											    NewFValue,
											    TrUserData)
						    end,
						    F4, F5, F6, TrUserData).


d_field_mesos_state_agentoverlayinfo_docker_bridge(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, TrUserData)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_docker_bridge(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6,
						       TrUserData);
d_field_mesos_state_agentoverlayinfo_docker_bridge(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mesos_state_bridgeinfo(Bs,
						TrUserData),
		   TrUserData),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2, F3,
						    if F4 == undefined ->
							   NewFValue;
						       true ->
							   merge_msg_mesos_state_bridgeinfo(F4,
											    NewFValue,
											    TrUserData)
						    end,
						    F5, F6, TrUserData).


d_field_mesos_state_agentoverlayinfo_backend(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6,
					     TrUserData)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_backend(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, TrUserData);
d_field_mesos_state_agentoverlayinfo_backend(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6,
					     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mesos_state_backendinfo(Bs,
						 TrUserData),
		   TrUserData),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2, F3, F4,
						    if F5 == undefined ->
							   NewFValue;
						       true ->
							   merge_msg_mesos_state_backendinfo(F5,
											     NewFValue,
											     TrUserData)
						    end,
						    F6, TrUserData).


d_field_mesos_state_agentoverlayinfo_state(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6,
					   TrUserData)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_state(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, TrUserData);
d_field_mesos_state_agentoverlayinfo_state(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6,
					   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue =
	id('d_msg_mesos_state_agentoverlayinfo.state'(Bs,
						      TrUserData),
	   TrUserData),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2, F3, F4, F5,
						    if F6 == undefined ->
							   NewFValue;
						       true ->
							   'merge_msg_mesos_state_agentoverlayinfo.state'(F6,
													  NewFValue,
													  TrUserData)
						    end,
						    TrUserData).


skip_varint_mesos_state_agentoverlayinfo(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6,
					 TrUserData) ->
    skip_varint_mesos_state_agentoverlayinfo(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6,
					     TrUserData);
skip_varint_mesos_state_agentoverlayinfo(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6,
					 TrUserData) ->
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, TrUserData).


skip_length_delimited_mesos_state_agentoverlayinfo(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_mesos_state_agentoverlayinfo(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6,
						       TrUserData);
skip_length_delimited_mesos_state_agentoverlayinfo(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2, F3, F4, F5,
						    F6, TrUserData).


skip_group_mesos_state_agentoverlayinfo(Bin, FNum, Z2,
					F1, F2, F3, F4, F5, F6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest, 0,
						    Z2, F1, F2, F3, F4, F5, F6,
						    TrUserData).


skip_32_mesos_state_agentoverlayinfo(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6,
				     TrUserData) ->
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, TrUserData).


skip_64_mesos_state_agentoverlayinfo(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6,
				     TrUserData) ->
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, TrUserData).


d_msg_mesos_state_agentinfo(Bin, TrUserData) ->
    dfp_read_field_def_mesos_state_agentinfo(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id([], TrUserData), TrUserData).

dfp_read_field_def_mesos_state_agentinfo(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    d_field_mesos_state_agentinfo_ip(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_mesos_state_agentinfo(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    d_field_mesos_state_agentinfo_overlays(Rest, Z1, Z2, F1,
					   F2, TrUserData);
dfp_read_field_def_mesos_state_agentinfo(<<>>, 0, 0, F1,
					 F2, TrUserData) ->
    #mesos_state_agentinfo{ip = F1,
			   overlays = lists_reverse(F2, TrUserData)};
dfp_read_field_def_mesos_state_agentinfo(Other, Z1, Z2,
					 F1, F2, TrUserData) ->
    dg_read_field_def_mesos_state_agentinfo(Other, Z1, Z2,
					    F1, F2, TrUserData).

dg_read_field_def_mesos_state_agentinfo(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_agentinfo(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_mesos_state_agentinfo(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_agentinfo_ip(Rest, 0, 0, F1, F2,
					   TrUserData);
      18 ->
	  d_field_mesos_state_agentinfo_overlays(Rest, 0, 0, F1,
						 F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_agentinfo(Rest, 0, 0, F1, F2,
						  TrUserData);
	    1 ->
		skip_64_mesos_state_agentinfo(Rest, 0, 0, F1, F2,
					      TrUserData);
	    2 ->
		skip_length_delimited_mesos_state_agentinfo(Rest, 0, 0,
							    F1, F2, TrUserData);
	    3 ->
		skip_group_mesos_state_agentinfo(Rest, Key bsr 3, 0, F1,
						 F2, TrUserData);
	    5 ->
		skip_32_mesos_state_agentinfo(Rest, 0, 0, F1, F2,
					      TrUserData)
	  end
    end;
dg_read_field_def_mesos_state_agentinfo(<<>>, 0, 0, F1,
					F2, TrUserData) ->
    #mesos_state_agentinfo{ip = F1,
			   overlays = lists_reverse(F2, TrUserData)}.

d_field_mesos_state_agentinfo_ip(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_mesos_state_agentinfo_ip(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_mesos_state_agentinfo_ip(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_agentinfo(Rest2, 0, 0,
					     NewFValue, F2, TrUserData).


d_field_mesos_state_agentinfo_overlays(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_mesos_state_agentinfo_overlays(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
d_field_mesos_state_agentinfo_overlays(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mesos_state_agentoverlayinfo(Bs,
						      TrUserData),
		   TrUserData),
    dfp_read_field_def_mesos_state_agentinfo(Rest2, 0, 0,
					     F1,
					     cons(NewFValue, F2, TrUserData),
					     TrUserData).


skip_varint_mesos_state_agentinfo(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_mesos_state_agentinfo(Rest, Z1, Z2, F1, F2,
				      TrUserData);
skip_varint_mesos_state_agentinfo(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_mesos_state_agentinfo(Rest, Z1, Z2,
					     F1, F2, TrUserData).


skip_length_delimited_mesos_state_agentinfo(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_mesos_state_agentinfo(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
skip_length_delimited_mesos_state_agentinfo(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_agentinfo(Rest2, 0, 0,
					     F1, F2, TrUserData).


skip_group_mesos_state_agentinfo(Bin, FNum, Z2, F1, F2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_mesos_state_agentinfo(Rest, 0, Z2,
					     F1, F2, TrUserData).


skip_32_mesos_state_agentinfo(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_mesos_state_agentinfo(Rest, Z1, Z2,
					     F1, F2, TrUserData).


skip_64_mesos_state_agentinfo(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_mesos_state_agentinfo(Rest, Z1, Z2,
					     F1, F2, TrUserData).


d_msg_mesos_state_state(Bin, TrUserData) ->
    dfp_read_field_def_mesos_state_state(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id([], TrUserData), TrUserData).

dfp_read_field_def_mesos_state_state(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_mesos_state_state_network(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_mesos_state_state(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_mesos_state_state_agents(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_mesos_state_state(<<>>, 0, 0, F1, F2,
				     TrUserData) ->
    #mesos_state_state{network = F1,
		       agents = lists_reverse(F2, TrUserData)};
dfp_read_field_def_mesos_state_state(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_mesos_state_state(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_mesos_state_state(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_state(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_mesos_state_state(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_state_network(Rest, 0, 0, F1, F2,
					    TrUserData);
      18 ->
	  d_field_mesos_state_state_agents(Rest, 0, 0, F1, F2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_state(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_mesos_state_state(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_mesos_state_state(Rest, 0, 0, F1,
							F2, TrUserData);
	    3 ->
		skip_group_mesos_state_state(Rest, Key bsr 3, 0, F1, F2,
					     TrUserData);
	    5 ->
		skip_32_mesos_state_state(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_mesos_state_state(<<>>, 0, 0, F1, F2,
				    TrUserData) ->
    #mesos_state_state{network = F1,
		       agents = lists_reverse(F2, TrUserData)}.

d_field_mesos_state_state_network(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_mesos_state_state_network(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_mesos_state_state_network(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mesos_state_networkconfig(Bs,
						   TrUserData),
		   TrUserData),
    dfp_read_field_def_mesos_state_state(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_mesos_state_networkconfig(F1,
										    NewFValue,
										    TrUserData)
					 end,
					 F2, TrUserData).


d_field_mesos_state_state_agents(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_mesos_state_state_agents(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_mesos_state_state_agents(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mesos_state_agentinfo(Bs,
					       TrUserData),
		   TrUserData),
    dfp_read_field_def_mesos_state_state(Rest2, 0, 0, F1,
					 cons(NewFValue, F2, TrUserData),
					 TrUserData).


skip_varint_mesos_state_state(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_mesos_state_state(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_mesos_state_state(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_mesos_state_state(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_mesos_state_state(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_mesos_state_state(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_mesos_state_state(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_state(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_group_mesos_state_state(Bin, FNum, Z2, F1, F2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_mesos_state_state(Rest, 0, Z2, F1,
					 F2, TrUserData).


skip_32_mesos_state_state(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_mesos_state_state(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_mesos_state_state(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_mesos_state_state(Rest, Z1, Z2, F1,
					 F2, TrUserData).




'd_enum_AgentOverlayInfo.State.Status'(0) ->
    'STATUS_INVALID';
'd_enum_AgentOverlayInfo.State.Status'(1) ->
    'STATUS_OK';
'd_enum_AgentOverlayInfo.State.Status'(2) ->
    'STATUS_FAILED';
'd_enum_AgentOverlayInfo.State.Status'(3) ->
    'STATUS_CONFIGURING';
'd_enum_AgentOverlayInfo.State.Status'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).


merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #mesos_state_overlayinfo{} ->
	  merge_msg_mesos_state_overlayinfo(Prev, New,
					    TrUserData);
      #mesos_state_networkconfig{} ->
	  merge_msg_mesos_state_networkconfig(Prev, New,
					      TrUserData);
      #'mesos_state_agentoverlayinfo.state'{} ->
	  'merge_msg_mesos_state_agentoverlayinfo.state'(Prev,
							 New, TrUserData);
      #mesos_state_vxlaninfo{} ->
	  merge_msg_mesos_state_vxlaninfo(Prev, New, TrUserData);
      #mesos_state_backendinfo{} ->
	  merge_msg_mesos_state_backendinfo(Prev, New,
					    TrUserData);
      #mesos_state_bridgeinfo{} ->
	  merge_msg_mesos_state_bridgeinfo(Prev, New, TrUserData);
      #mesos_state_agentoverlayinfo{} ->
	  merge_msg_mesos_state_agentoverlayinfo(Prev, New,
						 TrUserData);
      #mesos_state_agentinfo{} ->
	  merge_msg_mesos_state_agentinfo(Prev, New, TrUserData);
      #mesos_state_state{} ->
	  merge_msg_mesos_state_state(Prev, New, TrUserData)
    end.

merge_msg_mesos_state_overlayinfo(#mesos_state_overlayinfo{},
				  #mesos_state_overlayinfo{name = NFname,
							   subnet = NFsubnet,
							   prefix = NFprefix},
				  _) ->
    #mesos_state_overlayinfo{name = NFname,
			     subnet = NFsubnet, prefix = NFprefix}.

merge_msg_mesos_state_networkconfig(#mesos_state_networkconfig{overlays
								   =
								   PFoverlays},
				    #mesos_state_networkconfig{vtep_subnet =
								   NFvtep_subnet,
							       vtep_mac_oui =
								   NFvtep_mac_oui,
							       overlays =
								   NFoverlays},
				    TrUserData) ->
    #mesos_state_networkconfig{vtep_subnet = NFvtep_subnet,
			       vtep_mac_oui = NFvtep_mac_oui,
			       overlays =
				   if PFoverlays /= undefined,
				      NFoverlays /= undefined ->
					  'erlang_++'(PFoverlays, NFoverlays,
						      TrUserData);
				      PFoverlays == undefined -> NFoverlays;
				      NFoverlays == undefined -> PFoverlays
				   end}.

'merge_msg_mesos_state_agentoverlayinfo.state'(#'mesos_state_agentoverlayinfo.state'{status
											 =
											 PFstatus,
										     error
											 =
											 PFerror},
					       #'mesos_state_agentoverlayinfo.state'{status
											 =
											 NFstatus,
										     error
											 =
											 NFerror},
					       _) ->
    #'mesos_state_agentoverlayinfo.state'{status =
					      if NFstatus =:= undefined ->
						     PFstatus;
						 true -> NFstatus
					      end,
					  error =
					      if NFerror =:= undefined ->
						     PFerror;
						 true -> NFerror
					      end}.

merge_msg_mesos_state_vxlaninfo(#mesos_state_vxlaninfo{},
				#mesos_state_vxlaninfo{vni = NFvni,
						       vtep_name = NFvtep_name,
						       vtep_ip = NFvtep_ip,
						       vtep_mac = NFvtep_mac},
				_) ->
    #mesos_state_vxlaninfo{vni = NFvni,
			   vtep_name = NFvtep_name, vtep_ip = NFvtep_ip,
			   vtep_mac = NFvtep_mac}.

merge_msg_mesos_state_backendinfo(#mesos_state_backendinfo{vxlan
							       = PFvxlan},
				  #mesos_state_backendinfo{vxlan = NFvxlan},
				  TrUserData) ->
    #mesos_state_backendinfo{vxlan =
				 if PFvxlan /= undefined,
				    NFvxlan /= undefined ->
					merge_msg_mesos_state_vxlaninfo(PFvxlan,
									NFvxlan,
									TrUserData);
				    PFvxlan == undefined -> NFvxlan;
				    NFvxlan == undefined -> PFvxlan
				 end}.

merge_msg_mesos_state_bridgeinfo(#mesos_state_bridgeinfo{},
				 #mesos_state_bridgeinfo{name = NFname,
							 ip = NFip},
				 _) ->
    #mesos_state_bridgeinfo{name = NFname, ip = NFip}.

merge_msg_mesos_state_agentoverlayinfo(#mesos_state_agentoverlayinfo{info
									 =
									 PFinfo,
								     subnet =
									 PFsubnet,
								     mesos_bridge
									 =
									 PFmesos_bridge,
								     docker_bridge
									 =
									 PFdocker_bridge,
								     backend =
									 PFbackend,
								     state =
									 PFstate},
				       #mesos_state_agentoverlayinfo{info =
									 NFinfo,
								     subnet =
									 NFsubnet,
								     mesos_bridge
									 =
									 NFmesos_bridge,
								     docker_bridge
									 =
									 NFdocker_bridge,
								     backend =
									 NFbackend,
								     state =
									 NFstate},
				       TrUserData) ->
    #mesos_state_agentoverlayinfo{info =
				      if PFinfo /= undefined,
					 NFinfo /= undefined ->
					     merge_msg_mesos_state_overlayinfo(PFinfo,
									       NFinfo,
									       TrUserData);
					 PFinfo == undefined -> NFinfo;
					 NFinfo == undefined -> PFinfo
				      end,
				  subnet =
				      if NFsubnet =:= undefined -> PFsubnet;
					 true -> NFsubnet
				      end,
				  mesos_bridge =
				      if PFmesos_bridge /= undefined,
					 NFmesos_bridge /= undefined ->
					     merge_msg_mesos_state_bridgeinfo(PFmesos_bridge,
									      NFmesos_bridge,
									      TrUserData);
					 PFmesos_bridge == undefined ->
					     NFmesos_bridge;
					 NFmesos_bridge == undefined ->
					     PFmesos_bridge
				      end,
				  docker_bridge =
				      if PFdocker_bridge /= undefined,
					 NFdocker_bridge /= undefined ->
					     merge_msg_mesos_state_bridgeinfo(PFdocker_bridge,
									      NFdocker_bridge,
									      TrUserData);
					 PFdocker_bridge == undefined ->
					     NFdocker_bridge;
					 NFdocker_bridge == undefined ->
					     PFdocker_bridge
				      end,
				  backend =
				      if PFbackend /= undefined,
					 NFbackend /= undefined ->
					     merge_msg_mesos_state_backendinfo(PFbackend,
									       NFbackend,
									       TrUserData);
					 PFbackend == undefined -> NFbackend;
					 NFbackend == undefined -> PFbackend
				      end,
				  state =
				      if PFstate /= undefined,
					 NFstate /= undefined ->
					     'merge_msg_mesos_state_agentoverlayinfo.state'(PFstate,
											    NFstate,
											    TrUserData);
					 PFstate == undefined -> NFstate;
					 NFstate == undefined -> PFstate
				      end}.

merge_msg_mesos_state_agentinfo(#mesos_state_agentinfo{overlays
							   = PFoverlays},
				#mesos_state_agentinfo{ip = NFip,
						       overlays = NFoverlays},
				TrUserData) ->
    #mesos_state_agentinfo{ip = NFip,
			   overlays =
			       if PFoverlays /= undefined,
				  NFoverlays /= undefined ->
				      'erlang_++'(PFoverlays, NFoverlays,
						  TrUserData);
				  PFoverlays == undefined -> NFoverlays;
				  NFoverlays == undefined -> PFoverlays
			       end}.

merge_msg_mesos_state_state(#mesos_state_state{network =
						   PFnetwork,
					       agents = PFagents},
			    #mesos_state_state{network = NFnetwork,
					       agents = NFagents},
			    TrUserData) ->
    #mesos_state_state{network =
			   if PFnetwork /= undefined, NFnetwork /= undefined ->
				  merge_msg_mesos_state_networkconfig(PFnetwork,
								      NFnetwork,
								      TrUserData);
			      PFnetwork == undefined -> NFnetwork;
			      NFnetwork == undefined -> PFnetwork
			   end,
		       agents =
			   if PFagents /= undefined, NFagents /= undefined ->
				  'erlang_++'(PFagents, NFagents, TrUserData);
			      PFagents == undefined -> NFagents;
			      NFagents == undefined -> PFagents
			   end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #mesos_state_overlayinfo{} ->
	  v_msg_mesos_state_overlayinfo(Msg,
					[mesos_state_overlayinfo], TrUserData);
      #mesos_state_networkconfig{} ->
	  v_msg_mesos_state_networkconfig(Msg,
					  [mesos_state_networkconfig],
					  TrUserData);
      #'mesos_state_agentoverlayinfo.state'{} ->
	  'v_msg_mesos_state_agentoverlayinfo.state'(Msg,
						     ['mesos_state_agentoverlayinfo.state'],
						     TrUserData);
      #mesos_state_vxlaninfo{} ->
	  v_msg_mesos_state_vxlaninfo(Msg,
				      [mesos_state_vxlaninfo], TrUserData);
      #mesos_state_backendinfo{} ->
	  v_msg_mesos_state_backendinfo(Msg,
					[mesos_state_backendinfo], TrUserData);
      #mesos_state_bridgeinfo{} ->
	  v_msg_mesos_state_bridgeinfo(Msg,
				       [mesos_state_bridgeinfo], TrUserData);
      #mesos_state_agentoverlayinfo{} ->
	  v_msg_mesos_state_agentoverlayinfo(Msg,
					     [mesos_state_agentoverlayinfo],
					     TrUserData);
      #mesos_state_agentinfo{} ->
	  v_msg_mesos_state_agentinfo(Msg,
				      [mesos_state_agentinfo], TrUserData);
      #mesos_state_state{} ->
	  v_msg_mesos_state_state(Msg, [mesos_state_state],
				  TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_mesos_state_overlayinfo/3}).
v_msg_mesos_state_overlayinfo(#mesos_state_overlayinfo{name
							   = F1,
						       subnet = F2,
						       prefix = F3},
			      Path, _) ->
    v_type_string(F1, [name | Path]),
    v_type_string(F2, [subnet | Path]),
    v_type_uint32(F3, [prefix | Path]),
    ok;
v_msg_mesos_state_overlayinfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mesos_state_overlayinfo},
		  X, Path).

-dialyzer({nowarn_function,v_msg_mesos_state_networkconfig/3}).
v_msg_mesos_state_networkconfig(#mesos_state_networkconfig{vtep_subnet
							       = F1,
							   vtep_mac_oui = F2,
							   overlays = F3},
				Path, TrUserData) ->
    v_type_string(F1, [vtep_subnet | Path]),
    v_type_string(F2, [vtep_mac_oui | Path]),
    if is_list(F3) ->
	   _ = [v_msg_mesos_state_overlayinfo(Elem,
					      [overlays | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, mesos_state_overlayinfo}},
			 F3, [overlays | Path])
    end,
    ok;
v_msg_mesos_state_networkconfig(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mesos_state_networkconfig},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_mesos_state_agentoverlayinfo.state'/3}).
'v_msg_mesos_state_agentoverlayinfo.state'(#'mesos_state_agentoverlayinfo.state'{status
										     =
										     F1,
										 error
										     =
										     F2},
					   Path, _) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_AgentOverlayInfo.State.Status'(F1,
						  [status | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error | Path])
    end,
    ok;
'v_msg_mesos_state_agentoverlayinfo.state'(X, Path,
					   _TrUserData) ->
    mk_type_error({expected_msg,
		   'mesos_state_agentoverlayinfo.state'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_mesos_state_vxlaninfo/3}).
v_msg_mesos_state_vxlaninfo(#mesos_state_vxlaninfo{vni =
						       F1,
						   vtep_name = F2, vtep_ip = F3,
						   vtep_mac = F4},
			    Path, _) ->
    v_type_uint32(F1, [vni | Path]),
    v_type_string(F2, [vtep_name | Path]),
    v_type_string(F3, [vtep_ip | Path]),
    v_type_string(F4, [vtep_mac | Path]),
    ok;
v_msg_mesos_state_vxlaninfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mesos_state_vxlaninfo}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_mesos_state_backendinfo/3}).
v_msg_mesos_state_backendinfo(#mesos_state_backendinfo{vxlan
							   = F1},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_mesos_state_vxlaninfo(F1, [vxlan | Path],
				       TrUserData)
    end,
    ok;
v_msg_mesos_state_backendinfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mesos_state_backendinfo},
		  X, Path).

-dialyzer({nowarn_function,v_msg_mesos_state_bridgeinfo/3}).
v_msg_mesos_state_bridgeinfo(#mesos_state_bridgeinfo{name
							 = F1,
						     ip = F2},
			     Path, _) ->
    v_type_string(F1, [name | Path]),
    v_type_string(F2, [ip | Path]),
    ok;
v_msg_mesos_state_bridgeinfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mesos_state_bridgeinfo}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_mesos_state_agentoverlayinfo/3}).
v_msg_mesos_state_agentoverlayinfo(#mesos_state_agentoverlayinfo{info
								     = F1,
								 subnet = F2,
								 mesos_bridge =
								     F3,
								 docker_bridge =
								     F4,
								 backend = F5,
								 state = F6},
				   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_mesos_state_overlayinfo(F1, [info | Path],
					 TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [subnet | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_mesos_state_bridgeinfo(F3, [mesos_bridge | Path],
					TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_mesos_state_bridgeinfo(F4, [docker_bridge | Path],
					TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_mesos_state_backendinfo(F5, [backend | Path],
					 TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_msg_mesos_state_agentoverlayinfo.state'(F6,
						      [state | Path],
						      TrUserData)
    end,
    ok;
v_msg_mesos_state_agentoverlayinfo(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   mesos_state_agentoverlayinfo},
		  X, Path).

-dialyzer({nowarn_function,v_msg_mesos_state_agentinfo/3}).
v_msg_mesos_state_agentinfo(#mesos_state_agentinfo{ip =
						       F1,
						   overlays = F2},
			    Path, TrUserData) ->
    v_type_string(F1, [ip | Path]),
    if is_list(F2) ->
	   _ = [v_msg_mesos_state_agentoverlayinfo(Elem,
						   [overlays | Path],
						   TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, mesos_state_agentoverlayinfo}},
			 F2, [overlays | Path])
    end,
    ok;
v_msg_mesos_state_agentinfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mesos_state_agentinfo}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_mesos_state_state/3}).
v_msg_mesos_state_state(#mesos_state_state{network = F1,
					   agents = F2},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_mesos_state_networkconfig(F1, [network | Path],
					   TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_mesos_state_agentinfo(Elem, [agents | Path],
					    TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, mesos_state_agentinfo}},
			 F2, [agents | Path])
    end,
    ok.

-dialyzer({nowarn_function,'v_enum_AgentOverlayInfo.State.Status'/2}).
'v_enum_AgentOverlayInfo.State.Status'('STATUS_INVALID',
				       _Path) ->
    ok;
'v_enum_AgentOverlayInfo.State.Status'('STATUS_OK',
				       _Path) ->
    ok;
'v_enum_AgentOverlayInfo.State.Status'('STATUS_FAILED',
				       _Path) ->
    ok;
'v_enum_AgentOverlayInfo.State.Status'('STATUS_CONFIGURING',
				       _Path) ->
    ok;
'v_enum_AgentOverlayInfo.State.Status'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_AgentOverlayInfo.State.Status'(X, Path) ->
    mk_type_error({invalid_enum,
		   'AgentOverlayInfo.State.Status'},
		  X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'AgentOverlayInfo.State.Status'},
      [{'STATUS_INVALID', 0}, {'STATUS_OK', 1},
       {'STATUS_FAILED', 2}, {'STATUS_CONFIGURING', 3}]},
     {{msg, mesos_state_overlayinfo},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = subnet, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = prefix, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, mesos_state_networkconfig},
      [#field{name = vtep_subnet, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = vtep_mac_oui, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = overlays, fnum = 3, rnum = 4,
	      type = {msg, mesos_state_overlayinfo},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos_state_agentoverlayinfo.state'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'AgentOverlayInfo.State.Status'},
	      occurrence = optional,
	      opts = [{default, 'STATUS_INVALID'}]},
       #field{name = error, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, mesos_state_vxlaninfo},
      [#field{name = vni, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = vtep_name, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = vtep_ip, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = vtep_mac, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []}]},
     {{msg, mesos_state_backendinfo},
      [#field{name = vxlan, fnum = 1, rnum = 2,
	      type = {msg, mesos_state_vxlaninfo},
	      occurrence = optional, opts = []}]},
     {{msg, mesos_state_bridgeinfo},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, mesos_state_agentoverlayinfo},
      [#field{name = info, fnum = 1, rnum = 2,
	      type = {msg, mesos_state_overlayinfo},
	      occurrence = optional, opts = []},
       #field{name = subnet, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = mesos_bridge, fnum = 3, rnum = 4,
	      type = {msg, mesos_state_bridgeinfo},
	      occurrence = optional, opts = []},
       #field{name = docker_bridge, fnum = 4, rnum = 5,
	      type = {msg, mesos_state_bridgeinfo},
	      occurrence = optional, opts = []},
       #field{name = backend, fnum = 5, rnum = 6,
	      type = {msg, mesos_state_backendinfo},
	      occurrence = optional, opts = []},
       #field{name = state, fnum = 6, rnum = 7,
	      type = {msg, 'mesos_state_agentoverlayinfo.state'},
	      occurrence = optional, opts = []}]},
     {{msg, mesos_state_agentinfo},
      [#field{name = ip, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = overlays, fnum = 2, rnum = 3,
	      type = {msg, mesos_state_agentoverlayinfo},
	      occurrence = repeated, opts = []}]},
     {{msg, mesos_state_state},
      [#field{name = network, fnum = 1, rnum = 2,
	      type = {msg, mesos_state_networkconfig},
	      occurrence = optional, opts = []},
       #field{name = agents, fnum = 2, rnum = 3,
	      type = {msg, mesos_state_agentinfo},
	      occurrence = repeated, opts = []}]}].


get_msg_names() ->
    [mesos_state_overlayinfo, mesos_state_networkconfig,
     'mesos_state_agentoverlayinfo.state',
     mesos_state_vxlaninfo, mesos_state_backendinfo,
     mesos_state_bridgeinfo, mesos_state_agentoverlayinfo,
     mesos_state_agentinfo, mesos_state_state].


get_group_names() -> [].


get_msg_or_group_names() ->
    [mesos_state_overlayinfo, mesos_state_networkconfig,
     'mesos_state_agentoverlayinfo.state',
     mesos_state_vxlaninfo, mesos_state_backendinfo,
     mesos_state_bridgeinfo, mesos_state_agentoverlayinfo,
     mesos_state_agentinfo, mesos_state_state].


get_enum_names() -> ['AgentOverlayInfo.State.Status'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(mesos_state_overlayinfo) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = subnet, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = prefix, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(mesos_state_networkconfig) ->
    [#field{name = vtep_subnet, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = vtep_mac_oui, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = overlays, fnum = 3, rnum = 4,
	    type = {msg, mesos_state_overlayinfo},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos_state_agentoverlayinfo.state') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'AgentOverlayInfo.State.Status'},
	    occurrence = optional,
	    opts = [{default, 'STATUS_INVALID'}]},
     #field{name = error, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(mesos_state_vxlaninfo) ->
    [#field{name = vni, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = vtep_name, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = vtep_ip, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = vtep_mac, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []}];
find_msg_def(mesos_state_backendinfo) ->
    [#field{name = vxlan, fnum = 1, rnum = 2,
	    type = {msg, mesos_state_vxlaninfo},
	    occurrence = optional, opts = []}];
find_msg_def(mesos_state_bridgeinfo) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def(mesos_state_agentoverlayinfo) ->
    [#field{name = info, fnum = 1, rnum = 2,
	    type = {msg, mesos_state_overlayinfo},
	    occurrence = optional, opts = []},
     #field{name = subnet, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = mesos_bridge, fnum = 3, rnum = 4,
	    type = {msg, mesos_state_bridgeinfo},
	    occurrence = optional, opts = []},
     #field{name = docker_bridge, fnum = 4, rnum = 5,
	    type = {msg, mesos_state_bridgeinfo},
	    occurrence = optional, opts = []},
     #field{name = backend, fnum = 5, rnum = 6,
	    type = {msg, mesos_state_backendinfo},
	    occurrence = optional, opts = []},
     #field{name = state, fnum = 6, rnum = 7,
	    type = {msg, 'mesos_state_agentoverlayinfo.state'},
	    occurrence = optional, opts = []}];
find_msg_def(mesos_state_agentinfo) ->
    [#field{name = ip, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = overlays, fnum = 2, rnum = 3,
	    type = {msg, mesos_state_agentoverlayinfo},
	    occurrence = repeated, opts = []}];
find_msg_def(mesos_state_state) ->
    [#field{name = network, fnum = 1, rnum = 2,
	    type = {msg, mesos_state_networkconfig},
	    occurrence = optional, opts = []},
     #field{name = agents, fnum = 2, rnum = 3,
	    type = {msg, mesos_state_agentinfo},
	    occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('AgentOverlayInfo.State.Status') ->
    [{'STATUS_INVALID', 0}, {'STATUS_OK', 1},
     {'STATUS_FAILED', 2}, {'STATUS_CONFIGURING', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('AgentOverlayInfo.State.Status',
		     Value) ->
    'enum_symbol_by_value_AgentOverlayInfo.State.Status'(Value).


enum_value_by_symbol('AgentOverlayInfo.State.Status',
		     Sym) ->
    'enum_value_by_symbol_AgentOverlayInfo.State.Status'(Sym).


'enum_symbol_by_value_AgentOverlayInfo.State.Status'(0) ->
    'STATUS_INVALID';
'enum_symbol_by_value_AgentOverlayInfo.State.Status'(1) ->
    'STATUS_OK';
'enum_symbol_by_value_AgentOverlayInfo.State.Status'(2) ->
    'STATUS_FAILED';
'enum_symbol_by_value_AgentOverlayInfo.State.Status'(3) ->
    'STATUS_CONFIGURING'.


'enum_value_by_symbol_AgentOverlayInfo.State.Status'('STATUS_INVALID') ->
    0;
'enum_value_by_symbol_AgentOverlayInfo.State.Status'('STATUS_OK') ->
    1;
'enum_value_by_symbol_AgentOverlayInfo.State.Status'('STATUS_FAILED') ->
    2;
'enum_value_by_symbol_AgentOverlayInfo.State.Status'('STATUS_CONFIGURING') ->
    3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'mesos.modules.overlay'.



gpb_version_as_string() ->
    "3.27.3".

gpb_version_as_list() ->
    [3,27,3].
